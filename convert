/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */



package Converter;
import java.net.URL;
import java.io.BufferedReader;
import java.io.InputStreamReader;
//import java.swing.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
/**
 *
 * @author naim
 */
public class Converter extends javax.swing.JFrame {

    /**
     * Creates new form Converter
     */
    public Converter() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        curAmount = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        curTo = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        curFrom = new javax.swing.JList();
        jButton2 = new javax.swing.JButton();
        resultDisplay = new javax.swing.JTextField();
        resultDisplayTime = new javax.swing.JTextField();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Enter Amount:");

        curAmount.setText("1");

        jLabel2.setText("Currency From:");

        jLabel3.setText("Currency To:");

        curTo.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "AED - United Arab Emirates Dirham", "ARS - Argentine Peso", "AUD - Australian Dollar", "AWG - Aruban Florin", "BAM - Bosnia and Herzegovina convertible mark", "BBD - Barbadian Dollar", "BDT - Bangladeshi Taka", "BGN - Bulgarian Lev", "BHD - Bahraini Dinar", "BMD - Bermudian Dollar", "BOB - Bolivian Boliviano", "BRL - Brazilian Real", "BSD - Bahamian Dollar", "CAD - Canadian Dollar", "CHF - Swiss Franc", "CLP - Chilean Peso", "CNY - Chinese Yuan", "COP - Colombian Peso", "CZK - Czech Koruna", "DKK - Danish Krone", "DOP - Dominican Peso", "EGP - Egyptian Pound", "EUR - Euro", "FJD - Fijian Dollar", "GBP - British Pound Sterling", "GHS - Ghana Cedi", "GMD - Gambian Dalasi", "GTQ - Guatemalan Quetzal", "HKD - Hong Kong Dollar", "HRK - Croatian Kuna", "HUF - Hungarian Forint", "IDR - Indonesian Rupiah", "ILS - Israeli Sheqel", "INR - Indian Rupee", "ISK - Icelandic Krona", "JMD - Jamaican Dollar", "JOD - Jordanian Dinar", "JPY - Japanese Yen", "KES - Kenyan Shilling", "KHR - Cambodian Riel", "KRW - South Korean Won", "KWD - Kuwaiti Dinar", "LAK - Lao Kip", "LBP - Lebanese Pound", "LKR - Sri Lankan Rupee", "LTL - Lithuanian Litas", "MAD - Moroccan Dirham", "MDL - Moldovan Leu", "MGA - Malagasy Ariary", "MKD - Macedonian Denar", "MUR - Mauritian Rupee", "MVR - Maldivian Rufiyaa", "MXN - Mexican Peso", "MYR - Malaysian Ringgit", "NAD - Namibian Dollar", "NGN - Nigerian Naira", "NOK - Norwegian Krone", "NPR - Nepalese Rupee", "NZD - New Zealand Dollar", "OMR - Omani Rial", "PAB - Panamanian Balboa", "PEN - Peruvian Sol", "PHP - Philippine Peso", "PKR - Pakistani Rupee", "PLN - Polish Zloty", "PYG - Paraguayan Guaraní", "QAR - Qatari Riyal", "RON - Romanian Leu", "RSD - Serbian Dinar", "RUB - Russian Rouble", "SAR - Saudi Riyal", "SCR - Seychellois Rupee", "SEK - Swedish Krona", "SGD - Singapore Dollar", "SYP - Syrian Pound", "THB - Thai Baht", "TND - Tunisian Dinar", "TRY - Turkish Lira", "TWD - Taiwanese Dollar", "UAH - Ukraine Hryvnia", "UGX - Ugandan Shilling", "USD - United States Dollar", "UYU - Uruguayan Peso", "VEF - Venezuelan Bolívar", "VND - Vietnamese Dong", "XAF - Central African Franc", "XCD - East Caribbean Dollar", "XOF - West African Franc", "XPF - CFP Franc", "ZAR - South African Rand" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(curTo);

        curFrom.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "AED - United Arab Emirates Dirham", "ARS - Argentine Peso", "AUD - Australian Dollar", "AWG - Aruban Florin", "BAM - Bosnia and Herzegovina convertible mark", "BBD - Barbadian Dollar", "BDT - Bangladeshi Taka", "BGN - Bulgarian Lev", "BHD - Bahraini Dinar", "BMD - Bermudian Dollar", "BOB - Bolivian Boliviano", "BRL - Brazilian Real", "BSD - Bahamian Dollar", "CAD - Canadian Dollar", "CHF - Swiss Franc", "CLP - Chilean Peso", "CNY - Chinese Yuan", "COP - Colombian Peso", "CZK - Czech Koruna", "DKK - Danish Krone", "DOP - Dominican Peso", "EGP - Egyptian Pound", "EUR - Euro", "FJD - Fijian Dollar", "GBP - British Pound Sterling", "GHS - Ghana Cedi", "GMD - Gambian Dalasi", "GTQ - Guatemalan Quetzal", "HKD - Hong Kong Dollar", "HRK - Croatian Kuna", "HUF - Hungarian Forint", "IDR - Indonesian Rupiah", "ILS - Israeli Sheqel", "INR - Indian Rupee", "ISK - Icelandic Krona", "JMD - Jamaican Dollar", "JOD - Jordanian Dinar", "JPY - Japanese Yen", "KES - Kenyan Shilling", "KHR - Cambodian Riel", "KRW - South Korean Won", "KWD - Kuwaiti Dinar", "LAK - Lao Kip", "LBP - Lebanese Pound", "LKR - Sri Lankan Rupee", "LTL - Lithuanian Litas", "MAD - Moroccan Dirham", "MDL - Moldovan Leu", "MGA - Malagasy Ariary", "MKD - Macedonian Denar", "MUR - Mauritian Rupee", "MVR - Maldivian Rufiyaa", "MXN - Mexican Peso", "MYR - Malaysian Ringgit", "NAD - Namibian Dollar", "NGN - Nigerian Naira", "NOK - Norwegian Krone", "NPR - Nepalese Rupee", "NZD - New Zealand Dollar", "OMR - Omani Rial", "PAB - Panamanian Balboa", "PEN - Peruvian Sol", "PHP - Philippine Peso", "PKR - Pakistani Rupee", "PLN - Polish Zloty", "PYG - Paraguayan Guaraní", "QAR - Qatari Riyal", "RON - Romanian Leu", "RSD - Serbian Dinar", "RUB - Russian Rouble", "SAR - Saudi Riyal", "SCR - Seychellois Rupee", "SEK - Swedish Krona", "SGD - Singapore Dollar", "SYP - Syrian Pound", "THB - Thai Baht", "TND - Tunisian Dinar", "TRY - Turkish Lira", "TWD - Taiwanese Dollar", "UAH - Ukraine Hryvnia", "UGX - Ugandan Shilling", "USD - United States Dollar", "UYU - Uruguayan Peso", "VEF - Venezuelan Bolívar", "VND - Vietnamese Dong", "XAF - Central African Franc", "XCD - East Caribbean Dollar", "XOF - West African Franc", "XPF - CFP Franc", "ZAR - South African Rand", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(curFrom);

        jButton2.setText("Convert");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        resultDisplay.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(78, 78, 78))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(73, 73, 73)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(curAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(65, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addGap(48, 48, 48)
                                .addComponent(resultDisplayTime, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(resultDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(curAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(resultDisplayTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(resultDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>                        

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {                                         
        // Get the amount to covert
        String curAmountText = curAmount.getText();
        
        for (int i=0; i<curAmountText.length();i++)
        {
            if(!Character.isDigit(curAmountText.charAt(i)))
            { 
                JOptionPane.showMessageDialog(this,"Please enter a valid amount");
                curAmount.requestFocus();
                return;
            }
        }
        
        resultDisplay.setText("");
        
        String curFromtext = curFrom.getSelectedValue().toString();
        String curTotext   = curTo.getSelectedValue().toString();
        
        String[] temp = null;
        temp = curFromText.split("-");
        String curFromtitle = temp[0];
        String curFromCode = temp[1];
        
        temp = curToText.split("-");
        String curToTitle = temp[0];
        String curToCode  = temp[1];
        
        String URL= "http://themoneyconverter.com/rss-feed/KRW/rss.xml"+curFromCode+curToCode;

                                               
       try    
        {
           String results="";
           URL thePage = new URL(URL);
           BufferedReader in= new BufferedReader(new InputStreamReader(thePage.openStream()));
           String inputLine;
           
           while((inputLine=in.readLine())!=null)
                   {
                       results= results+inputLine;
                   }
                   
                   in.close();
                   
                   Pattern finalPatter = Pattern.compile("x/>(0-9.]+])</span>");
                   Matcher matchFind = finalPatter.matcher(results);
                   matchFind.find();

                    double curRate = Double.valueOf(matchFind.group(1)).doubleValue();
                    double totalConvert = curRate * Double.valueOf(curAmount.getText()).doubleValue();
                    
                    //Trade Time matching
                   //finalPatter = Pattern.compile("<span id=/",                
                  //yfs_t10_[a-zA-Z]+=x/,">(.*)</span>:");
                   matchFind = finalPatter.matcher(results);
                   matchFind.find();
                   
                   resultDisplay.setText(String.format("%,,2f", totalConvert));
                   resultDisplayTime.setText("Current Trade Day:" + matchFind.group(1));
             }  catch (Exception e){
            
                JOptionPane.showMessageDialog(this,"Uable connect");
    
                    }
        

        
        
    }                                        
       
      
        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Converter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form *///
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Converter().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTextField curAmount;
    private javax.swing.JList curFrom;
    private javax.swing.JList curTo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField resultDisplay;
    private javax.swing.JTextField resultDisplayTime;
    // End of variables declaration                   
}
